generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id       String          @id @default(uuid())
  name     String
  email    String          @unique
  password String
  imageUrl String
  role     Role            @default(student)
  accounts Account[]
  sessions Session[]
  tasks    User_TaskList[]
}

enum Role {
  tutor
  student
}

model TaskList {
  id    String          @id @default(uuid())
  users User_TaskList[]
  tasks Task[]
}

model User_TaskList {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  taskList   TaskList @relation(fields: [taskListId], references: [id])
  taskListId String

  @@id([userId, taskListId])
}

model Task {
  id         String   @id @default(uuid())
  content    String
  isDone     Boolean
  taskList   TaskList @relation(fields: [taskListId], references: [id])
  taskListId String
}
